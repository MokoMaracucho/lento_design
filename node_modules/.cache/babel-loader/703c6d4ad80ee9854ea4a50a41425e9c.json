{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, InputLabel, MenuItem, Select } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SomeQuestions = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      part_of_complex: '',\n      is_existing_complex: '',\n      introduction: {\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      }\n    },\n\n    /* validationSchema: validationSchema, */\n    onSubmit: values => {\n      console.log(values);\n    }\n  });\n  const [allData, setAllData] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get('http://10.0.4.5:8000/api/v1/vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setAllData(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"part_of_complex\",\n            value: formik.values.part_of_complex,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 42\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 42\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), formik.values.part_of_complex && /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"is_existing_complex\",\n            value: formik.values.is_existing_complex,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 46\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 46\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), formik.values.part_of_complex && formik.values.is_existing_complex && /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Choose a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: formik.values.existing_complex_name,\n            label: \"Age\",\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose complex name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), allData.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.id,\n              children: item.complex_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          fullWidth: true,\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"uOIUYpeRDQF9Ite92zXbMC6UuS0=\", false, function () {\n  return [useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useState","useEffect","useFormik","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","InputLabel","MenuItem","Select","SomeQuestions","formik","initialValues","part_of_complex","is_existing_complex","introduction","existing_complex_name","residence_type","vhe_type","onSubmit","values","console","log","allData","setAllData","fetchComplexNames","axios","get","then","result","response","data","results","catch","e","handleSubmit","color","handleChange","marginBottom","map","item","index","id","complex_name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { useFormik } from 'formik'\n\nimport {\n    Button,\n    Radio,\n    RadioGroup,\n    FormControlLabel,\n    FormControl,\n    FormLabel,\n    InputLabel,\n    MenuItem,\n    Select\n} from '@mui/material'\n\nconst SomeQuestions = () => {\n\n    const formik = useFormik({\n        initialValues: {\n            part_of_complex: '',\n            is_existing_complex: '',\n            introduction: {\n                existing_complex_name: '',\n                residence_type: '',\n                vhe_type: ''\n            }\n        },\n        /* validationSchema: validationSchema, */\n        onSubmit: (values) => {\n            console.log(values)\n        }\n    })\n\n    const[allData, setAllData] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get('http://10.0.4.5:8000/api/v1/vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setAllData(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n      }, [])\n\n    return (\n        <>\n            <div>\n                <form onSubmit={formik.handleSubmit}>\n\n                    {/* PART OF A COMPLEX */}\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                        <RadioGroup\n                            name='part_of_complex'\n                            value={formik.values.part_of_complex}\n                            onChange={formik.handleChange}\n                        >\n                            <FormControlLabel\n                                value='true'\n                                control={<Radio />}\n                                label='True'\n                            />\n                            <FormControlLabel\n                                value='false'\n                                control={<Radio />}\n                                label='False'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n\n                    {/* EXISTING COMPLEX */}\n                    {formik.values.part_of_complex && (\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                            <RadioGroup\n                                name='is_existing_complex'\n                                value={formik.values.is_existing_complex}\n                                onChange={formik.handleChange}\n                            >\n                                <FormControlLabel\n                                    value='true'\n                                    control={<Radio />}\n                                    label='True'\n                                />\n                                <FormControlLabel\n                                    value='false'\n                                    control={<Radio />}\n                                    label='False'\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                \n                    {/* RESIDENCE TYPE */}\n                    {formik.values.part_of_complex && formik.values.is_existing_complex && (\n                        <FormControl>\n                            <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                            <Select\n                                value={formik.values.existing_complex_name}\n                                label='Age'\n                                onChange={formik.handleChange}\n                            >\n                            <MenuItem value=''>Choose complex name</MenuItem>\n                                {allData.map((item, index) => (\n                                    <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    )}\n                    \n                    <Button color='primary' variant='contained' fullWidth type='submit'>\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}