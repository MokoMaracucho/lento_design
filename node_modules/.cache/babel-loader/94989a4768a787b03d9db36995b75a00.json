{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material';\nimport residenceTypes from '../../Json/ResidenceTypes';\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  part_of_complex: yup.boolean(),\n  is_existing_complex: yup.boolean(),\n  introduction: yup.object({\n    existing_complex_name: yup.number().required(),\n    residence_type: yup.number().required(),\n    vhe_type: yup.number().required('A living place type is madatory')\n  })\n});\n\nconst SomeQuestions = props => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      part_of_complex: '',\n      is_existing_complex: '',\n      introduction: {\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      }\n    },\n    validationSchema: validationSchema,\n    onSubmit: data => {\n      props.next(data);\n    }\n  });\n  const [complexNames, setComplexNames] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setComplexNames(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"part_of_complex\",\n            value: formik.values.part_of_complex,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 42\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 42\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), formik.values.part_of_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"is_existing_complex\",\n            value: formik.values.is_existing_complex,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 46\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 46\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), formik.values.part_of_complex === 'true' && formik.values.is_existing_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Choose a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introductions.existing_complex_name\",\n            value: formik.values.introductions.existing_complex_name,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a complex name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this), complexNames.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.id,\n              children: item.complex_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introductions.residence_type\",\n            value: formik.values.introductions.residence_type,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a residence type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this), residenceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.value,\n              children: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introductions.vhe_type\",\n            value: formik.values.introductions.vhe_type,\n            onChange: formik.handleChange,\n            error: formik.touched.introduction.vhe_type && Boolean(formik.errors.introduction.vhe_type),\n            helperText: formik.touched.vhe_type && formik.errors.vhe_type,\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a living place type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this), livingPlaceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.value,\n              children: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          fullWidth: true,\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"yXTDhPZgEnuAz/aOx2eYtTEppJA=\", false, function () {\n  return [useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useState","useEffect","axios","useFormik","yup","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","MenuItem","Select","residenceTypes","livingPlaceTypes","validationSchema","object","part_of_complex","boolean","is_existing_complex","introduction","existing_complex_name","number","required","residence_type","vhe_type","SomeQuestions","props","formik","initialValues","onSubmit","data","next","complexNames","setComplexNames","fetchComplexNames","get","process","env","REACT_APP_URL","then","result","response","results","console","log","catch","e","handleSubmit","color","values","handleChange","marginBottom","introductions","map","item","index","id","complex_name","value","label","touched","Boolean","errors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\n\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material'\n\nimport residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes'\n\nconst validationSchema = yup.object({\n    part_of_complex: yup.boolean(),\n    is_existing_complex: yup.boolean(),\n    introduction: yup.object({\n        existing_complex_name: yup.number().required(),\n        residence_type: yup.number().required(),\n        vhe_type: yup.number().required('A living place type is madatory')\n    })\n})\n\nconst SomeQuestions = (props) => {\n\n    const formik = useFormik({\n        initialValues: {\n            part_of_complex: '',\n            is_existing_complex: '',\n            introduction: {\n                existing_complex_name: '',\n                residence_type: '',\n                vhe_type: ''\n            }\n        },\n        validationSchema: validationSchema,\n        onSubmit: (data) => {\n            props.next(data)\n        }\n    })\n\n    const[complexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n      }, [])\n\n    return (\n        <>\n            <div>\n                <form onSubmit={formik.handleSubmit}>\n\n                    {/* PART OF A COMPLEX */}\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                        <RadioGroup\n                            name='part_of_complex'\n                            value={formik.values.part_of_complex}\n                            onChange={formik.handleChange}\n                        >\n                            <FormControlLabel\n                                value='true'\n                                control={<Radio />}\n                                label='True'\n                            />\n                            <FormControlLabel\n                                value='false'\n                                control={<Radio />}\n                                label='False'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n\n                    {/* EXISTING COMPLEX */}\n                    {formik.values.part_of_complex === 'true' && (\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                            <RadioGroup\n                                name='is_existing_complex'\n                                value={formik.values.is_existing_complex}\n                                onChange={formik.handleChange}\n                            >\n                                <FormControlLabel\n                                    value='true'\n                                    control={<Radio />}\n                                    label='True'\n                                />\n                                <FormControlLabel\n                                    value='false'\n                                    control={<Radio />}\n                                    label='False'\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                \n                    {/* EXISTING COMPLEX NAME */}\n                    {formik.values.part_of_complex === 'true' && formik.values.is_existing_complex === 'true' && (\n                        <FormControl>\n                            <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                            <Select\n                                name='introductions.existing_complex_name'\n                                value={formik.values.introductions.existing_complex_name}\n                                onChange={formik.handleChange}\n                            >\n                                <MenuItem value=''>Choose a complex name</MenuItem>\n                                {complexNames.map((item, index) => (\n                                    <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    )}\n                \n                    {/* RESIDENCE TYPE */}\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Residence type</FormLabel>\n                        <Select\n                            name='introductions.residence_type'\n                            value={formik.values.introductions.residence_type}\n                            onChange={formik.handleChange}\n                        >\n                            <MenuItem value=''>Choose a residence type</MenuItem>\n                            {residenceTypes.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                \n                    {/* LIVING PLACE TYPE */}\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Living place type</FormLabel>\n                        <Select\n                            name='introductions.vhe_type'\n                            value={formik.values.introductions.vhe_type}\n                            onChange={formik.handleChange}\n                            error={formik.touched.introduction.vhe_type && Boolean(formik.errors.introduction.vhe_type)}\n                            helperText={formik.touched.vhe_type && formik.errors.vhe_type}\n                        >\n                            <MenuItem value=''>Choose a living place type</MenuItem>\n                            {livingPlaceTypes.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    \n                    <Button color='primary' variant='contained' fullWidth type='submit'>\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}