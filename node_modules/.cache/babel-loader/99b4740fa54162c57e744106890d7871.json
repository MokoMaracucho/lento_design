{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useFormik, getIn } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material';\nimport { useData } from '../../Context/LivingPlaceRegistrationContext';\nimport { LivingPlaceRegistrationTimeline } from '../../Components/Registration/index';\nimport LivingPlaceRegistrationTimelineState from '../../Context/LivingPlaceRegistrationTimelineState';\nimport complexNames from '../../Json/ComplexNames';\nimport residenceTypes from '../../Json/ResidenceTypes';\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes';\nimport '../../Styles/Pages/LivingPlaceRegistration/LivingPlacesRegistration.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object({\n  introduction: Yup.object({\n    part_of_complex: Yup.boolean(),\n    is_existing_complex: Yup.boolean().when('part_of_complex', {\n      is: true,\n      then: Yup.boolean().required('test')\n    }),\n    existing_complex_name: Yup.number().when('is_existing_complex', {\n      is: true,\n      then: Yup.number().required('test')\n    }),\n    residence_type: Yup.number().required('A living place type is madatory'),\n    vhe_type: Yup.number().required('A living place type is madatory')\n  })\n});\n\nconst SomeQuestions = () => {\n  _s();\n\n  LivingPlaceRegistrationTimelineState.maxStep = 1;\n  const {\n    setValues,\n    data\n  } = useData();\n  const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: data,\n\n    /* validationSchema: validationSchema, */\n    onSubmit: data => {\n      setValues(data);\n      navigate('/living_place_registration/complex_informations');\n      console.log(data);\n    }\n  });\n  /* const[complexNames, setComplexNames] = useState([])\n    \n  const fetchComplexNames = () => {\n      axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n          const response = result.data.results\n          console.log(response)\n          setComplexNames(response)\n      }).catch(e => {\n          console.log('Error getting data: ' + e)\n      })\n  }\n   useEffect(() => {\n      fetchComplexNames()\n  }, [])\n   if(!complexNames) return null */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      className: \"form_living_place_register\",\n      children: [/*#__PURE__*/_jsxDEV(LivingPlaceRegistrationTimeline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Questions about the residence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black'\n          },\n          children: \"Is the residence part of a complex?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"introduction.part_of_complex\",\n          value: formik.values.introduction.part_of_complex,\n          onChange: formik.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"true\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 38\n            }, this),\n            label: \"True\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"false\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 38\n            }, this),\n            label: \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), formik.values.introduction.part_of_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black'\n          },\n          children: \"Does it already exist in the platform?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"introduction.is_existing_complex\",\n          value: formik.values.introduction.is_existing_complex,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex')),\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"true\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 42\n            }, this),\n            label: \"True\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"false\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 42\n            }, this),\n            label: \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), getIn(formik.touched, 'introduction.is_existing_complex') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.is_existing_complex')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this), formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Choose a complex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.existing_complex_name\",\n          value: formik.values.introduction.existing_complex_name,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 29\n          }, this), complexNames.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.id,\n            children: item.complex_name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), getIn(formik.touched, 'introduction.existing_complex_name') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.existing_complex_name')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Residence type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.residence_type\",\n          value: formik.values.introduction.residence_type,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), residenceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.value,\n            children: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), getIn(formik.touched, 'introduction.residence_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.residence_type')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Living place type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.vhe_type\",\n          value: formik.values.introduction.vhe_type,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), livingPlaceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.value,\n            children: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), getIn(formik.touched, 'introduction.vhe_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.vhe_type')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"GydElsH8YDI/sr+ziwYGTjYC4Yo=\", false, function () {\n  return [useData, useNavigate, useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useState","useEffect","useFormik","getIn","Yup","useNavigate","axios","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","MenuItem","Select","useData","LivingPlaceRegistrationTimeline","LivingPlaceRegistrationTimelineState","complexNames","residenceTypes","livingPlaceTypes","validationSchema","object","introduction","part_of_complex","boolean","is_existing_complex","when","is","then","required","existing_complex_name","number","residence_type","vhe_type","SomeQuestions","maxStep","setValues","data","navigate","formik","initialValues","onSubmit","console","log","handleSubmit","color","values","handleChange","touched","Boolean","errors","marginBottom","map","item","index","id","complex_name","value","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { useFormik, getIn } from 'formik'\nimport * as Yup from 'yup'\n\nimport { useNavigate } from 'react-router-dom'\n\nimport axios from 'axios'\n\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material'\n\nimport { useData } from '../../Context/LivingPlaceRegistrationContext'\n\nimport { LivingPlaceRegistrationTimeline } from '../../Components/Registration/index'\nimport LivingPlaceRegistrationTimelineState from '../../Context/LivingPlaceRegistrationTimelineState'\n\nimport complexNames from '../../Json/ComplexNames'\nimport residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes'\n\nimport '../../Styles/Pages/LivingPlaceRegistration/LivingPlacesRegistration.scss'\n\nconst validationSchema = Yup.object({\n    introduction: Yup.object({\n        part_of_complex: Yup.boolean(),\n        is_existing_complex: Yup.boolean().when('part_of_complex', {\n            is: true,\n            then: Yup.boolean().required('test')\n        }),\n        existing_complex_name: Yup.number().when('is_existing_complex', {\n            is: true,\n            then: Yup.number().required('test')\n        }),\n        residence_type: Yup.number().required('A living place type is madatory'),\n        vhe_type: Yup.number().required('A living place type is madatory')\n    })\n})\n\nconst SomeQuestions = () => {\n\n    LivingPlaceRegistrationTimelineState.maxStep = 1\n\n    const { setValues, data } = useData()\n\n    const navigate = useNavigate()\n\n    const formik = useFormik({\n        initialValues: data,\n        /* validationSchema: validationSchema, */\n        onSubmit: (data) => {\n            setValues(data)\n            navigate('/living_place_registration/complex_informations')\n            console.log(data)\n        }\n    })\n\n    /* const[complexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, [])\n\n    if(!complexNames) return null */\n\n    return (\n        <>\n            <form onSubmit={formik.handleSubmit} className='form_living_place_register'>\n                \n                <LivingPlaceRegistrationTimeline />\n\n                <h5>Questions about the residence</h5>\n\n                {/* PART OF A COMPLEX */}\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                    <RadioGroup\n                        name='introduction.part_of_complex'\n                        value={formik.values.introduction.part_of_complex}\n                        onChange={formik.handleChange}\n                    >\n                        <FormControlLabel\n                            value='true'\n                            control={<Radio />}\n                            label='True'\n                        />\n                        <FormControlLabel\n                            value='false'\n                            control={<Radio />}\n                            label='False'\n                        />\n                    </RadioGroup>\n                </FormControl>\n\n                {/* EXISTING COMPLEX */}\n                {formik.values.introduction.part_of_complex === 'true' && (\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend' style={{ color: 'black'}}>Does it already exist in the platform?</FormLabel>\n                        <RadioGroup\n                            name='introduction.is_existing_complex'\n                            value={formik.values.introduction.is_existing_complex}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex'))}\n                        >\n                            <FormControlLabel\n                                value='true'\n                                control={<Radio />}\n                                label='True'\n                            />\n                            <FormControlLabel\n                                value='false'\n                                control={<Radio />}\n                                label='False'\n                            />\n                        </RadioGroup>\n                        {getIn(formik.touched, 'introduction.is_existing_complex') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.is_existing_complex')}\n                            </div>\n                        )}\n                    </FormControl>\n                )}\n            \n                {/* EXISTING COMPLEX NAME */}\n                {formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && (\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                        <Select\n                            name='introduction.existing_complex_name'\n                            value={formik.values.introduction.existing_complex_name}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name'))}\n                        >\n                            <MenuItem value=''>Choose a complex name</MenuItem>\n                            {complexNames.map((item, index) => (\n                                <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                            ))}\n                        </Select>\n                        {getIn(formik.touched, 'introduction.existing_complex_name') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.existing_complex_name')}\n                            </div>\n                        )}\n                    </FormControl>\n                )}\n            \n                {/* RESIDENCE TYPE */}\n                <FormControl>\n                    <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Residence type</FormLabel>\n                    <Select\n                        name='introduction.residence_type'\n                        value={formik.values.introduction.residence_type}\n                        onChange={formik.handleChange}\n                        error={getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type'))}\n                    >\n                        <MenuItem value=''>Choose a residence type</MenuItem>\n                        {residenceTypes.map((item, index) => (\n                            <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                        ))}\n                    </Select>\n                    {getIn(formik.touched, 'introduction.residence_type') && (\n                        <div>\n                            {getIn(formik.errors, 'introduction.residence_type')}\n                        </div>\n                    )}\n                </FormControl>\n            \n                {/* LIVING PLACE TYPE */}\n                <FormControl>\n                    <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Living place type</FormLabel>\n                    <Select\n                        name='introduction.vhe_type'\n                        value={formik.values.introduction.vhe_type}\n                        onChange={formik.handleChange}\n                        error={getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type'))}\n                    >\n                        <MenuItem value=''>Choose a living place type</MenuItem>\n                        {livingPlaceTypes.map((item, index) => (\n                            <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                        ))}\n                    </Select>\n                    {getIn(formik.touched, 'introduction.vhe_type') && (\n                        <div>\n                            {getIn(formik.errors, 'introduction.vhe_type')}\n                        </div>\n                    )}\n                </FormControl>\n                \n                <Button color='primary' variant='contained' fullWidth type='submit'>\n                    Next\n                </Button>\n            </form>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}