{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistrationSomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport 'core-js/es6/promise';\nimport 'core-js/es6/set';\nimport 'core-js/es6/map';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Select, MenuItem } from '@material-ui/core';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { Info } from '@material-ui/icons';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport { LivingPlaceRegistrationTimeline } from '../Components/Registration/index';\nimport { useData } from '../Context/DataContext';\nimport LivingPlaceRegistrationTimelineState from '../Context/LivingPlaceRegistrationTimelineState';\nimport '../Styles/Pages/LivingPlaceRegistrationSomeQuestions.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LivingPlaceRegistrationSomeQuestions = () => {\n  _s();\n\n  /* const [partOfComplex, setParOfComplex] = useState()\n  const [isExistingComplex, setIsExistingComplex] = useState() */\n  let partOfComplex = false;\n  let isExistingComplex = false;\n\n  const test = () => {\n    axios({\n      method: 'post',\n      url: ' http://10.0.4.5:8000/api/v1/vhe/user/',\n      data: {\n        name: 'test'\n      }\n    });\n  };\n\n  test();\n  console.log(process.env.REACT_APP_URL);\n  /* const[complexNames, setComplexNames] = useState([]) */\n\n  const {\n    setValues,\n    data\n  } = useData();\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: {\n      errors\n    }\n  } = useForm({\n    defaultValues: {\n      part_of_complex: data.part_of_complex,\n      is_existing_complex: data.is_existing_complex,\n      existing_complex_name: data.existing_complex_name,\n      residence_type: data.residence_type,\n      vhe_type: data.vhe_type\n    }\n  });\n  /* const partOfAComplex = watch('part_of_complex')\n  const existingComplex = watch('is_existing_complex') */\n\n  /* useEffect(() => {\n      console.log(existingComplex)\n  }, [existingComplex]) */\n\n  /* const fetchComplexNames = () => {\n      axios.get('').then(result => {\n          const response = result.data.results\n          console.log(response)\n          setComplexNames(response)\n          console.log(complexNames)\n      }).catch(e => {\n          console.log('Error getting data: ' + e)\n      })\n  } */\n\n  const navigate = useNavigate();\n\n  const onSubmit = data => {\n    navigate('/living_place_registration/complex_informations');\n    LivingPlaceRegistrationTimelineState.step = 2;\n    /* navigate('/living_place_registration/send_datas') */\n\n    setValues(data);\n    console.log(data);\n  };\n  /*  useEffect(() => {\n       if(existingComplex) {\n           fetchComplexNames()\n           console.log(existingComplex)\n       }\n   }) */\n\n\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      className: \"timelineFrom__container\",\n      children: [/*#__PURE__*/_jsxDEV(LivingPlaceRegistrationTimeline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Questions about the residence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"partOfAComplex__div\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup\n          /* {...register('part_of_complex')} */\n\n          /* {...register('part_of_complex', { required: true })} */\n          , {\n            onChange: e => partOfComplex = e.target.value,\n            defaultValue: data.part_of_complex,\n            style: {\n              display: 'initial'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                style: {\n                  color: '#eeeeee'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this),\n              label: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                style: {\n                  color: '#eeeeee'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this),\n              label: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), partOfComplex && /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"partOfAComplex__div\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Does it already exist in the platform?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup\n          /* {...register('is_existing_complex')} */\n\n          /* defaultValue={data.is_existing_complex} */\n          , {\n            onChange: e => setIsExistingComplex(e.target.value),\n            style: {\n              display: 'initial'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                style: {\n                  color: '#eeeeee'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 37\n              }, this),\n              label: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                style: {\n                  color: '#eeeeee'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 37\n              }, this),\n              label: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this), partOfComplex && isExistingComplex && /*#__PURE__*/_jsxDEV(FormControl, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"existingComplexName__div\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Choose a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"existingComplexNameError__div\",\n            children: [/*#__PURE__*/_jsxDEV(Select, { ...register('existing_complex_name', {\n                required: true\n              }),\n              defaultValue: data.existing_complex_name,\n              style: textFieldStyle,\n              children: existingComplexes__array.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.value,\n                children: item.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this), errors.existing_complex_name && errors.existing_complex_name.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red_COLOR\",\n              children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                style: {\n                  fontSize: '35px',\n                  marginLeft: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 146\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 118\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), errors.existing_complex_name && errors.existing_complex_name.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"red_COLOR error_FORM\",\n            children: \"A complex name is required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 114\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"residenceType__div\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"residenceTypeError__div\",\n            children: [/*#__PURE__*/_jsxDEV(Select, { ...register('residence_type', {\n                required: true\n              }),\n\n              /* defaultValue={data.residence_type} */\n              style: textFieldStyle,\n              children: residenceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.value,\n                children: item.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 29\n            }, this), errors.residence_type && errors.residence_type.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red_COLOR\",\n              children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                style: {\n                  fontSize: '35px',\n                  marginLeft: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 128\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 100\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this), errors.residence_type && errors.residence_type.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"red_COLOR error_FORM\",\n            children: \"A residence type is madatory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 96\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"VheType__div\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"VheTypeError__div\",\n            children: [/*#__PURE__*/_jsxDEV(Select, { ...register('vhe_type', {\n                required: true\n              }),\n\n              /* defaultValue={data.vhe_type} */\n              style: textFieldStyle,\n              children: livingPlaceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item.value,\n                children: item.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this), errors.vhe_type && errors.vhe_type.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red_COLOR\",\n              children: /*#__PURE__*/_jsxDEV(CancelIcon, {\n                style: {\n                  fontSize: '35px',\n                  marginLeft: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 116\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 88\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), errors.vhe_type && errors.vhe_type.type === \"required\" && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"red_COLOR error_FORM\",\n            children: \"A living place type is madatory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 84\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"someQuestionsNext__div\",\n        children: [/*#__PURE__*/_jsxDEV(Info, {\n          style: {\n            color: '#eeeeee'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          style: {\n            backgroundColor: '#5398D4',\n            borderRadius: 50,\n            fontFamily: 'DMSansMedium',\n            boxShadow: 'unset',\n            marginLeft: '10px'\n          },\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(LivingPlaceRegistrationSomeQuestions, \"pEQT4bBQz+xG0RfKPLtf47P7LzI=\", false, function () {\n  return [useData, useForm, useNavigate];\n});\n\n_c = LivingPlaceRegistrationSomeQuestions;\nconst existingComplexes__array = [{\n  value: 'complex1',\n  label: 'Complex 1'\n}, {\n  value: 'complex2',\n  label: 'Complex 2'\n}, {\n  value: 'complex3',\n  label: 'Complex 3'\n}, {\n  value: 'complex4',\n  label: 'Complex 4'\n}];\nconst residenceTypes__array = [{\n  value: 'apartment',\n  label: 'Apartment'\n}, {\n  value: 'house',\n  label: 'House'\n}, {\n  value: 'mobil_home',\n  label: 'Mobil home'\n}, {\n  value: 'studio',\n  label: 'Studio'\n}];\nconst livingPlaceTypes__array = [{\n  value: 'bed',\n  label: 'Bed'\n}, {\n  value: 'room',\n  label: 'Room'\n}, {\n  value: 'residence',\n  label: 'Residence'\n}];\nconst textFieldStyle = {\n  width: '300px',\n  height: '40px',\n  borderRadius: '5px',\n  background: '#eee',\n  paddingLeft: '15px',\n  paddingTop: '5px'\n};\nexport default LivingPlaceRegistrationSomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"LivingPlaceRegistrationSomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistrationSomeQuestions.js"],"names":["React","useState","useEffect","axios","useForm","yupResolver","yup","useNavigate","Button","Select","MenuItem","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Info","CancelIcon","LivingPlaceRegistrationTimeline","useData","LivingPlaceRegistrationTimelineState","LivingPlaceRegistrationSomeQuestions","partOfComplex","isExistingComplex","test","method","url","data","name","console","log","process","env","REACT_APP_URL","setValues","register","handleSubmit","watch","formState","errors","defaultValues","part_of_complex","is_existing_complex","existing_complex_name","residence_type","vhe_type","navigate","onSubmit","step","color","e","target","value","display","setIsExistingComplex","marginBottom","required","textFieldStyle","existingComplexes__array","map","item","index","label","type","fontSize","marginLeft","residenceTypes__array","livingPlaceTypes__array","backgroundColor","borderRadius","fontFamily","boxShadow","width","height","background","paddingLeft","paddingTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as yup from 'yup'\n\nimport 'core-js/es6/promise'\nimport 'core-js/es6/set'\nimport 'core-js/es6/map'\n\nimport { useNavigate } from 'react-router-dom'\n\nimport { Button, Select, MenuItem } from '@material-ui/core'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport { Info } from '@material-ui/icons'\nimport CancelIcon from '@mui/icons-material/Cancel'\n\nimport { LivingPlaceRegistrationTimeline } from '../Components/Registration/index'\n\nimport { useData } from '../Context/DataContext'\nimport LivingPlaceRegistrationTimelineState from '../Context/LivingPlaceRegistrationTimelineState'\n\nimport '../Styles/Pages/LivingPlaceRegistrationSomeQuestions.scss'\n\nconst LivingPlaceRegistrationSomeQuestions = () => {\n\n    /* const [partOfComplex, setParOfComplex] = useState()\n    const [isExistingComplex, setIsExistingComplex] = useState() */\n\n    let partOfComplex = false\n    let isExistingComplex = false\n\n    const test = () => {\n        axios({\n            method: 'post',\n            url: ' http://10.0.4.5:8000/api/v1/vhe/user/',\n            data: {\n                name: 'test'\n            }\n        })\n    }\n    test()\n\n    console.log(process.env.REACT_APP_URL)\n\n    /* const[complexNames, setComplexNames] = useState([]) */\n\n    const { setValues, data } = useData()\n\n    const { register, handleSubmit, watch, formState: { errors } } = useForm({\n        defaultValues: {\n            part_of_complex: data.part_of_complex,\n            is_existing_complex: data.is_existing_complex,\n            existing_complex_name: data.existing_complex_name,\n            residence_type: data.residence_type,\n            vhe_type: data.vhe_type\n        }\n    })\n    \n    /* const partOfAComplex = watch('part_of_complex')\n    const existingComplex = watch('is_existing_complex') */\n\n    /* useEffect(() => {\n        console.log(existingComplex)\n    }, [existingComplex]) */\n      \n    /* const fetchComplexNames = () => {\n        axios.get('').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n            console.log(complexNames)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    } */\n\n    const navigate = useNavigate()\n\n    const onSubmit = (data) => {\n        navigate('/living_place_registration/complex_informations')\n        LivingPlaceRegistrationTimelineState.step = 2\n        /* navigate('/living_place_registration/send_datas') */\n        setValues(data)\n        console.log(data)\n    }\n\n   /*  useEffect(() => {\n        if(existingComplex) {\n            fetchComplexNames()\n            console.log(existingComplex)\n        }\n    }) */\n\n    console.log(data)\n    \n    return (\n        <>\n            <form\n                onSubmit={handleSubmit(onSubmit)}\n                className='timelineFrom__container'\n            >\n                <LivingPlaceRegistrationTimeline />\n                <h5>Questions about the residence</h5>\n\n                {/* PART OF A COMPLEX */}\n                <FormControl component='fieldset'>\n                    <div id='partOfAComplex__div'>\n\n                        <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                        <RadioGroup\n                            /* {...register('part_of_complex')} */\n                            /* {...register('part_of_complex', { required: true })} */\n                            onChange={(e) => partOfComplex = e.target.value}\n                            defaultValue={data.part_of_complex}\n                            style={{ display: 'initial' }}\n                        >\n                            <FormControlLabel value='true' control={\n                                <Radio\n                                    style={{ color: '#eeeeee' }}\n                                />\n                            } label='Yes' />\n\n                            <FormControlLabel value='false' control={\n                                <Radio\n                                    style={{ color: '#eeeeee' }}\n                                />\n                            } label='No' />\n                        </RadioGroup>\n                        \n                        {/* {errors.part_of_complex && errors.part_of_complex.type === \"required\" && <span className='red_COLOR error_FORM'>Text</span>} */}\n                    </div>\n                </FormControl>\n\n\n                {/* EXISTING COMPLEX */}\n                {partOfComplex && (\n                    <FormControl component='fieldset'>\n                        <div id='partOfAComplex__div'>\n\n                            <FormLabel component='legend' style={{ color: 'black'}}>Does it already exist in the platform?</FormLabel>\n                            <RadioGroup\n                                /* {...register('is_existing_complex')} */\n                                /* defaultValue={data.is_existing_complex} */\n                                onChange={(e) => setIsExistingComplex(e.target.value)}\n                                style={{ display: 'initial' }}\n                            >\n                                <FormControlLabel value='true' control={\n                                    <Radio\n                                        style={{ color: '#eeeeee' }}\n                                    />\n                                } label='Yes' />\n\n                                <FormControlLabel value='false' control={\n                                    <Radio\n                                        style={{ color: '#eeeeee' }}\n                                    />\n                                } label='No' />\n                            </RadioGroup>\n                            \n                        </div>\n                    </FormControl>\n                )}\n                \n                {/* CHOOSE COMPLEX */}\n                {partOfComplex && isExistingComplex && (\n                    <FormControl>\n                        <div id='existingComplexName__div'>\n                            <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                            <div id='existingComplexNameError__div'>\n                                <Select\n                                    {...register('existing_complex_name', { required: true })}\n                                    defaultValue={data.existing_complex_name}\n                                    style={textFieldStyle}\n                                >\n                                {existingComplexes__array.map((item, index) => (\n                                    <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                                    ))}\n                                </Select>\n                        \n                                {errors.existing_complex_name && errors.existing_complex_name.type === \"required\" && <span className='red_COLOR'><CancelIcon style={{ fontSize: '35px', marginLeft: '10px'}} /></span>}\n                            </div>\n                        \n                            {errors.existing_complex_name && errors.existing_complex_name.type === \"required\" && <span className='red_COLOR error_FORM'>A complex name is required</span>}\n                        </div>\n                    </FormControl>\n                )}\n                \n                {/* RESIDENCE TYPE */}\n                <FormControl>\n                    <div id='residenceType__div'>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Residence type</FormLabel>\n                        <div id='residenceTypeError__div'>\n                            <Select\n                                {...register('residence_type', { required: true })}\n                                /* defaultValue={data.residence_type} */\n                                style={textFieldStyle}\n                            >\n                            {residenceTypes__array.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                            </Select>\n                            \n                            {errors.residence_type && errors.residence_type.type === \"required\" && <span className='red_COLOR'><CancelIcon style={{ fontSize: '35px', marginLeft: '10px'}} /></span>}\n                        </div>\n                        \n                        {errors.residence_type && errors.residence_type.type === \"required\" && <span className='red_COLOR error_FORM'>A residence type is madatory</span>}\n                    </div>\n                </FormControl>\n                \n                {/* RESIDENCE TYPE */}\n                <FormControl>\n                    <div id='VheType__div'>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Living place type</FormLabel>\n                        <div id='VheTypeError__div'>\n                            <Select\n                                {...register('vhe_type', { required: true })}\n                                /* defaultValue={data.vhe_type} */\n                                style={textFieldStyle}\n                            >\n                            {livingPlaceTypes__array.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                            </Select>\n                            \n                            {errors.vhe_type && errors.vhe_type.type === \"required\" && <span className='red_COLOR'><CancelIcon style={{ fontSize: '35px', marginLeft: '10px'}} /></span>}\n                        </div>\n                        \n                        {errors.vhe_type && errors.vhe_type.type === \"required\" && <span className='red_COLOR error_FORM'>A living place type is madatory</span>}\n                    </div>\n                </FormControl>\n\n                {/* <div id='floorplanInformationsButtons__div'> */}\n                    {/* NEXT */}\n                    <div id='someQuestionsNext__div'>\n                        <Info style={{ color: '#eeeeee' }}/>\n                        <Button\n                            type='submit'\n                            variant='contained'\n                            style={{\n                                backgroundColor: '#5398D4',\n                                borderRadius: 50,\n                                fontFamily: 'DMSansMedium',\n                                boxShadow: 'unset',\n                                marginLeft: '10px'\n                            }}\n                        >\n                            Next\n                        </Button>\n                    </div>\n                {/* </div> */}\n            </form>\n        </>\n    )\n}\n\nconst existingComplexes__array = [\n    {\n        value: 'complex1',\n        label: 'Complex 1'\n    },\n    {\n        value: 'complex2',\n        label: 'Complex 2'\n    },\n    {\n        value: 'complex3',\n        label: 'Complex 3'\n    },\n    {\n        value: 'complex4',\n        label: 'Complex 4'\n    }\n]\n\nconst residenceTypes__array = [\n    {\n        value: 'apartment',\n        label: 'Apartment'\n    },\n    {\n        value: 'house',\n        label: 'House'\n    },\n    {\n        value: 'mobil_home',\n        label: 'Mobil home'\n    },\n    {\n        value: 'studio',\n        label: 'Studio'\n    }\n]\n\nconst livingPlaceTypes__array = [\n    {\n        value: 'bed',\n        label: 'Bed'\n    },\n    {\n        value: 'room',\n        label: 'Room'\n    },\n    {\n        value: 'residence',\n        label: 'Residence'\n    }\n]\n\nconst textFieldStyle = {\n    width: '300px',\n    height: '40px',\n    borderRadius: '5px',\n    background: '#eee',\n    paddingLeft: '15px',\n    paddingTop: '5px'\n}\n\nexport default LivingPlaceRegistrationSomeQuestions\n"]},"metadata":{},"sourceType":"module"}