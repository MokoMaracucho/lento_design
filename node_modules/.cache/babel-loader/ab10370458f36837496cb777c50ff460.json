{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/FormUI/SelectWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useField, useFormikContext } from 'formik';\nimport { TextField, MenuItem } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SelectWrapper = ({\n  name,\n  options,\n  ...otherProps\n}) => {\n  _s();\n\n  const {\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(name);\n\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setFieldValue(name, value);\n  };\n\n  const configSelect = { ...field,\n    ...otherProps,\n    select: true,\n    variant: 'outlined',\n    fullWidth: true,\n    onChange: handleChange\n  };\n\n  if (meta && meta.touched && meta.error) {\n    configSelect.error = true;\n    configSelect.helperText = meta.error;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TextField, { ...configSelect,\n      children: Object.keys(options).map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: item.id,\n          children: options[item]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SelectWrapper, \"nZJVWYi6lCZusqN9F3PpQPH1wVo=\", false, function () {\n  return [useFormikContext, useField];\n});\n\n_c = SelectWrapper;\nexport default SelectWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectWrapper\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/FormUI/SelectWrapper.js"],"names":["React","useField","useFormikContext","TextField","MenuItem","SelectWrapper","name","options","otherProps","setFieldValue","field","meta","handleChange","e","value","target","configSelect","select","variant","fullWidth","onChange","touched","error","helperText","Object","keys","map","item","index","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,QAA3C;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,eAApC;;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,OAFmB;AAGnB,KAAGC;AAHgB,CAAD,KAIhB;AAAA;;AAEF,QAAM;AAAEC,IAAAA;AAAF,MAAoBP,gBAAgB,EAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,IAAR,IAAgBV,QAAQ,CAACK,IAAD,CAA9B;;AAEA,QAAMM,YAAY,GAAIC,CAAD,IAAO;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAN,IAAAA,aAAa,CAACH,IAAD,EAAOQ,KAAP,CAAb;AACH,GAHD;;AAKA,QAAME,YAAY,GAAG,EACjB,GAAGN,KADc;AAEjB,OAAGF,UAFc;AAGjBS,IAAAA,MAAM,EAAE,IAHS;AAIjBC,IAAAA,OAAO,EAAE,UAJQ;AAKjBC,IAAAA,SAAS,EAAE,IALM;AAMjBC,IAAAA,QAAQ,EAAER;AANO,GAArB;;AASA,MAAGD,IAAI,IAAIA,IAAI,CAACU,OAAb,IAAwBV,IAAI,CAACW,KAAhC,EAAuC;AACnCN,IAAAA,YAAY,CAACM,KAAb,GAAqB,IAArB;AACAN,IAAAA,YAAY,CAACO,UAAb,GAA0BZ,IAAI,CAACW,KAA/B;AACH;;AAED,sBACI;AAAA,2BACI,QAAC,SAAD,OAAeN,YAAf;AAAA,gBACKQ,MAAM,CAACC,IAAP,CAAYlB,OAAZ,EAAqBmB,GAArB,CAAyB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACvC,4BACI,QAAC,QAAD;AAAsB,UAAA,KAAK,EAAED,IAAI,CAACE,EAAlC;AAAA,oBACKtB,OAAO,CAACoB,IAAD;AADZ,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH,OANA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAaH,CAzCD;;GAAMvB,a;UAMwBH,gB,EACJD,Q;;;KAPpBI,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\n\nimport { TextField, MenuItem } from '@mui/material'\n\nconst SelectWrapper = ({\n    name,\n    options,\n    ...otherProps\n}) => {\n    \n    const { setFieldValue } = useFormikContext()\n    const [field, meta] = useField(name)\n\n    const handleChange = (e) => {\n        const { value } = e.target\n        setFieldValue(name, value)\n    }\n\n    const configSelect = {\n        ...field,\n        ...otherProps,\n        select: true,\n        variant: 'outlined',\n        fullWidth: true,\n        onChange: handleChange\n    }\n\n    if(meta && meta.touched && meta.error) {\n        configSelect.error = true\n        configSelect.helperText = meta.error\n    }\n\n    return (\n        <>\n            <TextField {...configSelect}>\n                {Object.keys(options).map((item, index) => {\n                    return (\n                        <MenuItem key={index} value={item.id}>\n                            {options[item]}\n                        </MenuItem>\n                    )\n                })}\n            </TextField>\n        </>\n    )\n}\n\nexport default SelectWrapper\n"]},"metadata":{},"sourceType":"module"}