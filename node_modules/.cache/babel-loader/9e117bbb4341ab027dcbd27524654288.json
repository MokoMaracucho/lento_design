{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useFormik, getIn } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material';\nimport { LivingPlaceRegistrationTimeline } from '../Components/Registration/index';\nimport { GlobalVariablesContext } from '../Context/GlobalVariablesContext';\nimport { useData } from '../Context/DataContext';\nimport LivingPlaceRegistrationTimelineState from '../Context/LivingPlaceRegistrationTimelineState';\nimport complexNames from '../../Json/ComplexNames';\nimport residenceTypes from '../../Json/ResidenceTypes';\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object({\n  introduction: Yup.object({\n    part_of_complex: Yup.boolean(),\n    is_existing_complex: Yup.boolean().when('part_of_complex', {\n      is: true,\n      then: Yup.boolean().required('test')\n    }),\n    existing_complex_name: Yup.number().when('is_existing_complex', {\n      is: true,\n      then: Yup.number().required('test')\n    }),\n    residence_type: Yup.number().required('A living place type is madatory'),\n    vhe_type: Yup.number().required('A living place type is madatory')\n  })\n});\n\nconst SomeQuestions = () => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      introduction: {\n        part_of_complex: '',\n        is_existing_complex: '',\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      }\n    },\n    validationSchema: validationSchema,\n    onSubmit: data => {\n      console.log(data);\n    }\n  });\n  const [complexNames, setComplexNames] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setComplexNames(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  if (!complexNames) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black'\n          },\n          children: \"Is the residence part of a complex?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"introduction.part_of_complex\",\n          value: formik.values.introduction.part_of_complex,\n          onChange: formik.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"true\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 38\n            }, this),\n            label: \"True\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"false\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 38\n            }, this),\n            label: \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), formik.values.introduction.part_of_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black'\n          },\n          children: \"Is the residence part of a complex?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"introduction.is_existing_complex\",\n          value: formik.values.introduction.is_existing_complex,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex')),\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"true\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 42\n            }, this),\n            label: \"True\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"false\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 42\n            }, this),\n            label: \"False\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), getIn(formik.touched, 'introduction.is_existing_complex') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.is_existing_complex')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Choose a complex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.existing_complex_name\",\n          value: formik.values.introduction.existing_complex_name,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this), complexNames.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.id,\n            children: item.complex_name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), getIn(formik.touched, 'introduction.existing_complex_name') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.existing_complex_name')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Residence type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.residence_type\",\n          value: formik.values.introduction.residence_type,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), residenceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.value,\n            children: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), getIn(formik.touched, 'introduction.residence_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.residence_type')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          component: \"legend\",\n          style: {\n            color: 'black',\n            marginBottom: '10px'\n          },\n          children: \"Living place type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          name: \"introduction.vhe_type\",\n          value: formik.values.introduction.vhe_type,\n          onChange: formik.handleChange,\n          error: getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type')),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"\",\n            children: \"Choose a living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), livingPlaceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.value,\n            children: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), getIn(formik.touched, 'introduction.vhe_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getIn(formik.errors, 'introduction.vhe_type')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        fullWidth: true,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"yXTDhPZgEnuAz/aOx2eYtTEppJA=\", false, function () {\n  return [useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Pages/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useState","useEffect","axios","useFormik","getIn","Yup","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","MenuItem","Select","LivingPlaceRegistrationTimeline","GlobalVariablesContext","useData","LivingPlaceRegistrationTimelineState","complexNames","residenceTypes","livingPlaceTypes","validationSchema","object","introduction","part_of_complex","boolean","is_existing_complex","when","is","then","required","existing_complex_name","number","residence_type","vhe_type","SomeQuestions","formik","initialValues","onSubmit","data","console","log","setComplexNames","fetchComplexNames","get","process","env","REACT_APP_URL","result","response","results","catch","e","handleSubmit","color","values","handleChange","touched","Boolean","errors","marginBottom","map","item","index","id","complex_name","value","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { useFormik, getIn } from 'formik'\nimport * as Yup from 'yup'\n\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material'\n\nimport { LivingPlaceRegistrationTimeline } from '../Components/Registration/index'\n\nimport { GlobalVariablesContext } from '../Context/GlobalVariablesContext'\nimport { useData } from '../Context/DataContext'\nimport LivingPlaceRegistrationTimelineState from '../Context/LivingPlaceRegistrationTimelineState'\n\nimport complexNames from '../../Json/ComplexNames'\nimport residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes'\n\nconst validationSchema = Yup.object({\n    introduction: Yup.object({\n        part_of_complex: Yup.boolean(),\n        is_existing_complex: Yup.boolean().when('part_of_complex', {\n            is: true,\n            then: Yup.boolean().required('test')\n        }),\n        existing_complex_name: Yup.number().when('is_existing_complex', {\n            is: true,\n            then: Yup.number().required('test')\n        }),\n        residence_type: Yup.number().required('A living place type is madatory'),\n        vhe_type: Yup.number().required('A living place type is madatory')\n    })\n})\n\nconst SomeQuestions = () => {\n\n    const formik = useFormik({\n        initialValues: {\n            introduction: {\n                part_of_complex: '',\n                is_existing_complex: '',\n                existing_complex_name: '',\n                residence_type: '',\n                vhe_type: ''\n            }\n        },\n        validationSchema: validationSchema,\n        onSubmit: (data) => {\n            console.log(data)\n        }\n    })\n\n    const[complexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, [])\n\n    if(!complexNames) return null\n\n    return (\n        <>\n            <form onSubmit={formik.handleSubmit}>\n\n                {/* PART OF A COMPLEX */}\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                    <RadioGroup\n                        name='introduction.part_of_complex'\n                        value={formik.values.introduction.part_of_complex}\n                        onChange={formik.handleChange}\n                    >\n                        <FormControlLabel\n                            value='true'\n                            control={<Radio />}\n                            label='True'\n                        />\n                        <FormControlLabel\n                            value='false'\n                            control={<Radio />}\n                            label='False'\n                        />\n                    </RadioGroup>\n                </FormControl>\n\n                {/* EXISTING COMPLEX */}\n                {formik.values.introduction.part_of_complex === 'true' && (\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                        <RadioGroup\n                            name='introduction.is_existing_complex'\n                            value={formik.values.introduction.is_existing_complex}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex'))}\n                        >\n                            <FormControlLabel\n                                value='true'\n                                control={<Radio />}\n                                label='True'\n                            />\n                            <FormControlLabel\n                                value='false'\n                                control={<Radio />}\n                                label='False'\n                            />\n                        </RadioGroup>\n                        {getIn(formik.touched, 'introduction.is_existing_complex') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.is_existing_complex')}\n                            </div>\n                        )}\n                    </FormControl>\n                )}\n            \n                {/* EXISTING COMPLEX NAME */}\n                {formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && (\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                        <Select\n                            name='introduction.existing_complex_name'\n                            value={formik.values.introduction.existing_complex_name}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name'))}\n                        >\n                            <MenuItem value=''>Choose a complex name</MenuItem>\n                            {complexNames.map((item, index) => (\n                                <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                            ))}\n                        </Select>\n                        {getIn(formik.touched, 'introduction.existing_complex_name') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.existing_complex_name')}\n                            </div>\n                        )}\n                    </FormControl>\n                )}\n            \n                {/* RESIDENCE TYPE */}\n                <FormControl>\n                    <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Residence type</FormLabel>\n                    <Select\n                        name='introduction.residence_type'\n                        value={formik.values.introduction.residence_type}\n                        onChange={formik.handleChange}\n                        error={getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type'))}\n                    >\n                        <MenuItem value=''>Choose a residence type</MenuItem>\n                        {residenceTypes.map((item, index) => (\n                            <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                        ))}\n                    </Select>\n                    {getIn(formik.touched, 'introduction.residence_type') && (\n                        <div>\n                            {getIn(formik.errors, 'introduction.residence_type')}\n                        </div>\n                    )}\n                </FormControl>\n            \n                {/* LIVING PLACE TYPE */}\n                <FormControl>\n                    <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Living place type</FormLabel>\n                    <Select\n                        name='introduction.vhe_type'\n                        value={formik.values.introduction.vhe_type}\n                        onChange={formik.handleChange}\n                        error={getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type'))}\n                    >\n                        <MenuItem value=''>Choose a living place type</MenuItem>\n                        {livingPlaceTypes.map((item, index) => (\n                            <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                        ))}\n                    </Select>\n                    {getIn(formik.touched, 'introduction.vhe_type') && (\n                        <div>\n                            {getIn(formik.errors, 'introduction.vhe_type')}\n                        </div>\n                    )}\n                </FormControl>\n                \n                <Button color='primary' variant='contained' fullWidth type='submit'>\n                    Submit\n                </Button>\n            </form>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}