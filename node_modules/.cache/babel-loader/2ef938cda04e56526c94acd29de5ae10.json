{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/ComplexInformations.js\";\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ComplexInformations = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {},\n      onSubmit: data => {\n        console.log(data);\n        const res = axios.post('http://10.0.4.5:8000/api/v1/vhe/registerintroduction/', data);\n        res.then(res => {\n          console.log('res', res);\n        }).catch(error => {\n          console.log(error);\n        });\n        props.next(data);\n      },\n      children: ({\n        values,\n        handleChange,\n        handleBlur\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 29\n            }, this), \"Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), \"No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), values.part_of_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Part of a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this), \"Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 37\n              }, this), \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), values.part_of_complex && values.is_existing_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"existing_complex_name\",\n            style: {\n              display: 'block'\n            },\n            children: \"Complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"existing_complex_name\",\n            value: values.existing_complex_name,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            style: {\n              display: 'block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              label: \"Select a complex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this), allData.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.id,\n              label: item.complex_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"residence_type\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"residence_type\",\n          value: values.residence_type,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: residenceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"vhe_type\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"vhe_type\",\n          value: values.vhe_type,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: livingPlaceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_c = ComplexInformations;\nexport default ComplexInformations;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComplexInformations\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/ComplexInformations.js"],"names":["React","Formik","Field","Form","ComplexInformations","props","data","console","log","res","axios","post","then","catch","error","next","values","handleChange","handleBlur","part_of_complex","is_existing_complex","display","existing_complex_name","allData","map","item","index","id","complex_name","residence_type","residenceTypes__array","value","label","vhe_type","livingPlaceTypes__array"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Formik, Field, Form } from 'formik'\n\nconst ComplexInformations = (props) => {\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    \n                    \n                }}\n                onSubmit={( data ) => {\n                    console.log(data)\n                    const res = axios.post('http://10.0.4.5:8000/api/v1/vhe/registerintroduction/', data)\n                    res.then(res => { console.log('res', res) }).catch( error => { console.log(error) })\n                    props.next(data)\n                }}\n            >\n            {({\n                values,\n                handleChange,\n                handleBlur\n            }) => (\n                <Form>\n                    <div>Complex name</div>\n                    <div>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='true' />\n                            Yes\n                        </label>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='false' />\n                            No\n                        </label>\n                    </div>\n\n                    {values.part_of_complex && (\n                        <>\n                            <div>Part of a complex</div>\n                            <div>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='true' />\n                                    Yes\n                                </label>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='false' />\n                                    No\n                                </label>\n                            </div>\n                        </>\n                    )}\n\n                    {values.part_of_complex && values.is_existing_complex && (\n                        <>\n                            <label htmlFor='existing_complex_name' style={{ display: 'block' }}>\n                                Complex name\n                            </label>\n                            <select\n                                name='existing_complex_name'\n                                value={values.existing_complex_name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                style={{ display: 'block' }}\n                            >\n                                <option value='' label='Select a complex' />\n                                {allData.map((item, index) => (\n                                    <option key={index} value={item.id} label={item.complex_name} />\n                                ))}\n                            </select>\n                        </>\n                    )}\n\n                    <label htmlFor='residence_type' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='residence_type'\n                        value={values.residence_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        {residenceTypes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <label htmlFor='vhe_type' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='vhe_type'\n                        value={values.vhe_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        {livingPlaceTypes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <button type='submit'>Submit</button>\n                </Form>\n            )}\n            </Formik>\n        </>\n    )\n}\n\nexport default ComplexInformations\n"]},"metadata":{},"sourceType":"module"}