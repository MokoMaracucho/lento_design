{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Formik, Field, Form } from 'formik';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core';\nimport { GlobalVariablesContext } from '../../Context/GlobalVariablesContext';\nimport { Select } from '../../Components/FormUI/Registration/index';\nimport ResidenceTypes from '../../Json/ResidenceTypes';\nimport LivingPlaceTypes from '../../Json/LivingPlaceTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SomeQuestions = props => {\n  _s();\n\n  const {\n    REACT_APP_URL\n  } = useContext(GlobalVariablesContext);\n  const [ComplexNames, setComplexNames] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get(REACT_APP_URL + 'vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setComplexNames(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  if (!setComplexNames) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Questions about the residence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          part_of_complex: '',\n          is_existing_complex: '',\n          introduction: {\n            existing_complex_name: '',\n            residence_type: '',\n            vhe_type: ''\n          }\n        },\n        onSubmit: data => {\n          console.log(data);\n          const res = axios.post(REACT_APP_URL + 'vhe/registerintroduction/', data);\n          res.then(res => {\n            console.log('res', res);\n          }).catch(error => {\n            console.log(error);\n          });\n          props.next(data);\n        },\n        children: ({\n          values,\n          handleChange,\n          handleBlur\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Part of a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"part_of_complex\",\n                value: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this), \"Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"part_of_complex\",\n                value: \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this), \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), values.part_of_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Existing complex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(Field, {\n                  type: \"radio\",\n                  name: \"is_existing_complex\",\n                  value: \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 41\n                }, this), \"Yes\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(Field, {\n                  type: \"radio\",\n                  name: \"is_existing_complex\",\n                  value: \"false\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 41\n                }, this), \"No\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true), values.part_of_complex && values.is_existing_complex && /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introduction.existing_complex_name\",\n            label: \"Country\",\n            options: ComplexNames\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"introduction.residence_type\",\n            style: {\n              display: 'block'\n            },\n            children: \"Complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"introduction.residence_type\",\n            value: values.introduction.residence_type,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            style: {\n              display: 'block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              label: \"Select a residence type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this), ResidenceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.value,\n              label: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"introduction.vhe_type\",\n            style: {\n              display: 'block'\n            },\n            children: \"Complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"introduction.vhe_type\",\n            value: values.introduction.vhe_type,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            style: {\n              display: 'block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              label: \"Select a living place type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this), LivingPlaceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.value,\n              label: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"gq4IRDTC5Tjp5d7YG8it9GqD+VI=\");\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useContext","useState","useEffect","axios","Formik","Field","Form","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","GlobalVariablesContext","Select","ResidenceTypes","LivingPlaceTypes","SomeQuestions","props","REACT_APP_URL","ComplexNames","setComplexNames","fetchComplexNames","get","then","result","response","data","results","console","log","catch","e","part_of_complex","is_existing_complex","introduction","existing_complex_name","residence_type","vhe_type","res","post","error","next","values","handleChange","handleBlur","display","map","item","index","value","label"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { Formik, Field, Form } from 'formik'\n\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core'\n\nimport { GlobalVariablesContext } from '../../Context/GlobalVariablesContext'\n\nimport { Select } from '../../Components/FormUI/Registration/index'\n\nimport ResidenceTypes from '../../Json/ResidenceTypes'\nimport LivingPlaceTypes from '../../Json/LivingPlaceTypes'\n\n\nconst SomeQuestions = (props) => {\n\n    const { REACT_APP_URL } = useContext(GlobalVariablesContext)\n\n    const[ComplexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, [])\n\n    if(!setComplexNames) return null\n\n    return (\n        <>\n            <div className='form__container'>\n                \n                <h5>Questions about the residence</h5>\n\n                <Formik\n                    initialValues={{\n                        part_of_complex: '',\n                        is_existing_complex: '',\n                        introduction: {\n                            existing_complex_name: '',\n                            residence_type: '',\n                            vhe_type: ''\n                        }\n                    }}\n                    onSubmit={( data ) => {\n                        console.log(data)\n                        const res = axios.post(REACT_APP_URL + 'vhe/registerintroduction/', data)\n                        res.then(res => { console.log('res', res) }).catch( error => { console.log(error) })\n                        props.next(data)\n                    }}\n                >\n                {({\n                    values,\n                    handleChange,\n                    handleBlur\n                }) => (\n                    <Form>\n                        <div>Part of a complex</div>\n                        <div>\n                            <label>\n                                <Field type='radio' name='part_of_complex' value='true' />\n                                Yes\n                            </label>\n                            <label>\n                                <Field type='radio' name='part_of_complex' value='false' />\n                                No\n                            </label>\n                        </div>\n\n                        {values.part_of_complex && (\n                            <>\n                                <div>Existing complex</div>\n                                <div>\n                                    <label>\n                                        <Field type='radio' name='is_existing_complex' value='true' />\n                                        Yes\n                                    </label>\n                                    <label>\n                                        <Field type='radio' name='is_existing_complex' value='false' />\n                                        No\n                                    </label>\n                                </div>\n                            </>\n                        )}\n\n                        {values.part_of_complex && values.is_existing_complex && (\n                            <Select\n                                name='introduction.existing_complex_name'\n                                label='Country'\n                                options={ComplexNames}\n                            />\n                        )}\n                        {/* <>\n                            <label htmlFor='introduction.existing_complex_name' style={{ display: 'block' }}>\n                                Complex name\n                            </label>\n                            <select\n                                name='introduction.existing_complex_name'\n                                value={values.introduction.existing_complex_name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                style={{ display: 'block' }}\n                            >\n                                <option value='' label='Select a complex' />\n                                {allData.map((item, index) => (\n                                    <option key={index} value={item.id} label={item.complex_name} />\n                                ))}\n                            </select>\n                        </> */}\n\n                        <label htmlFor='introduction.residence_type' style={{ display: 'block' }}>\n                            Complex name\n                        </label>\n                        <select\n                            name='introduction.residence_type'\n                            value={values.introduction.residence_type}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            style={{ display: 'block' }}\n                        >\n                            <option value='' label='Select a residence type' />\n                            {ResidenceTypes.map((item, index) => (\n                                <option key={index} value={item.value} label={item.label} />\n                            ))}\n                        </select>\n\n                        <label htmlFor='introduction.vhe_type' style={{ display: 'block' }}>\n                            Complex name\n                        </label>\n                        <select\n                            name='introduction.vhe_type'\n                            value={values.introduction.vhe_type}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            style={{ display: 'block' }}\n                        >\n                            <option value='' label='Select a living place type' />\n                            {LivingPlaceTypes.map((item, index) => (\n                                <option key={index} value={item.value} label={item.label} />\n                            ))}\n                        </select>\n\n                        <button type='submit'>Submit</button>\n                    </Form>\n                )}\n                </Formik>\n            </div>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}