{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/SomeQuestions.js\";\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SomeQuestions = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Some questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        part_of_complex: '',\n        is_existing_complex: '',\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      },\n      onSubmit: data => console.log(data),\n      children: ({\n        values,\n        handleChange,\n        handleBlur\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Part of a complex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 29\n            }, this), \"Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), \"No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), values.part_of_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Part of a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 37\n              }, this), \"Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 37\n              }, this), \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), values.part_of_complex && values.is_existing_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"existing_complex_name\",\n            style: {\n              display: 'block'\n            },\n            children: \"Complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"existing_complex_name\",\n            value: values.existing_complex_name,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            style: {\n              display: 'block'\n            },\n            children: existingComplexes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.value,\n              label: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"existing_complex_name\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"existing_complex_name\",\n          value: values.existing_complex_name,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: existingComplexes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"existing_complex_name\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"existing_complex_name\",\n          value: values.existing_complex_name,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: existingComplexes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = SomeQuestions;\nconst existingComplexes__array = [{\n  value: '1',\n  label: 'Complex 1'\n}, {\n  value: '2',\n  label: 'Complex 2'\n}, {\n  value: '3',\n  label: 'Complex 3'\n}, {\n  value: '4',\n  label: 'Complex 4'\n}];\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/SomeQuestions.js"],"names":["React","Formik","Field","Form","SomeQuestions","props","part_of_complex","is_existing_complex","existing_complex_name","residence_type","vhe_type","data","console","log","values","handleChange","handleBlur","display","existingComplexes__array","map","item","index","value","label"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Formik, Field, Form } from 'formik'\n\nconst SomeQuestions = (props) => {\n\n    return (\n        <>\n            <h3>Some questions</h3>\n            <Formik\n                initialValues={{\n                    part_of_complex: '',\n                    is_existing_complex: '',\n                    existing_complex_name: '',\n                    residence_type: '',\n                    vhe_type: ''\n                }}\n                onSubmit={( data ) => console.log(data)}\n            >\n            {({\n                values,\n                handleChange,\n                handleBlur\n            }) => (\n                <Form>\n                    <div>Part of a complex</div>\n                    <div>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='true' />\n                            Yes\n                        </label>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='false' />\n                            No\n                        </label>\n                    </div>\n\n                    {values.part_of_complex && (\n                        <>\n                            <div>Part of a complex</div>\n                            <div>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='true' />\n                                    Yes\n                                </label>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='false' />\n                                    No\n                                </label>\n                            </div>\n                        </>\n                    )}\n\n                    {values.part_of_complex && values.is_existing_complex && (\n                        <>\n                            <label htmlFor='existing_complex_name' style={{ display: 'block' }}>\n                                Complex name\n                            </label>\n                            <select\n                                name='existing_complex_name'\n                                value={values.existing_complex_name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                style={{ display: 'block' }}\n                            >\n                                {existingComplexes__array.map((item, index) => (\n                                    <option key={index} value={item.value} label={item.label} />\n                                ))}\n                            </select>\n                        </>\n                    )}\n\n                    <label htmlFor='existing_complex_name' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='existing_complex_name'\n                        value={values.existing_complex_name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        {existingComplexes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <label htmlFor='existing_complex_name' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='existing_complex_name'\n                        value={values.existing_complex_name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        {existingComplexes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <button type='submit'>Submit</button>\n                </Form>\n            )}\n            </Formik>\n        </>\n    )\n}\n\nconst existingComplexes__array = [\n    {\n        value: '1',\n        label: 'Complex 1'\n    },\n    {\n        value: '2',\n        label: 'Complex 2'\n    },\n    {\n        value: '3',\n        label: 'Complex 3'\n    },\n    {\n        value: '4',\n        label: 'Complex 4'\n    }\n]\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}