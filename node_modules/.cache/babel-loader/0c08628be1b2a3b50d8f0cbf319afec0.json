{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Formik, Field, Form } from 'formik';\nimport { useFormik } from 'formik';\nimport { InputLabel, MenuItem, FormControl, FormLabel, Select } from '@mui/material/';\nimport { GlobalVariablesContext } from '../../Context/GlobalVariablesContext';\n/* import residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes' */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SomeQuestions = props => {\n  _s();\n\n  const {\n    REACT_APP_URL\n  } = useContext(GlobalVariablesContext);\n  const formik = useFormik({\n    initialValues: {\n      part_of_complex: '',\n      is_existing_complex: '',\n      introduction: {\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      }\n    },\n\n    /* validationSchema: validationSchema, */\n    onSubmit: values => {\n      console.log(values);\n    }\n  });\n  const [complexNames, setComplexNames] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get(REACT_APP_URL + 'vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setComplexNames(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  if (!setComplexNames) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Questions about the residence\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Part of a complex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this), \"Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: \"radio\",\n              name: \"part_of_complex\",\n              value: \"false\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this), \"No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), formik.values.part_of_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Existing complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 41\n              }, this), \"Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 41\n              }, this), \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true), formik.values.part_of_complex && formik.values.is_existing_complex && /*#__PURE__*/_jsxDEV(FormControl, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"existingComplexName__div\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              component: \"legend\",\n              style: {\n                color: 'black',\n                marginBottom: '10px'\n              },\n              children: \"Choose a complex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"existingComplexNameError__div\",\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                name: \"introduction.existing_complex_name\",\n                value: formik.values.introduction.existing_complex_name,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: \"\",\n                  children: \"Choose complex name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 45\n                }, this), complexNames.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: item.id,\n                  children: item.complex_name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"existingComplexNameError__container\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"/14lpoGN/GaVIdC2L8wOKLAiaG8=\", false, function () {\n  return [useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useContext","useState","useEffect","axios","Formik","Field","Form","useFormik","InputLabel","MenuItem","FormControl","FormLabel","Select","GlobalVariablesContext","SomeQuestions","props","REACT_APP_URL","formik","initialValues","part_of_complex","is_existing_complex","introduction","existing_complex_name","residence_type","vhe_type","onSubmit","values","console","log","complexNames","setComplexNames","fetchComplexNames","get","then","result","response","data","results","catch","e","handleSubmit","color","marginBottom","map","item","index","id","complex_name"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { Formik, Field, Form } from 'formik'\nimport { useFormik } from 'formik'\n\nimport { InputLabel, MenuItem, FormControl, FormLabel, Select } from '@mui/material/';\n\nimport { GlobalVariablesContext } from '../../Context/GlobalVariablesContext'\n\n/* import residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes' */\n\n\nconst SomeQuestions = (props) => {\n\n    const { REACT_APP_URL } = useContext(GlobalVariablesContext)\n\n    const formik = useFormik({\n        initialValues: {\n            part_of_complex: '',\n            is_existing_complex: '',\n            introduction: {\n                existing_complex_name: '',\n                residence_type: '',\n                vhe_type: ''\n            }\n        },\n        /* validationSchema: validationSchema, */\n        onSubmit: (values) => {\n            console.log(values)\n        }\n    })\n\n    const[complexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, [])\n\n    if(!setComplexNames) return null\n\n    return (\n        <>\n            <div className='form__container'>\n                \n                <h5>Questions about the residence</h5>\n\n                <form onSubmit={formik.handleSubmit}>\n                        <div>Part of a complex</div>\n                        <div>\n                            <label>\n                                <Field type='radio' name='part_of_complex' value='true' />\n                                Yes\n                            </label>\n                            <label>\n                                <Field type='radio' name='part_of_complex' value='false' />\n                                No\n                            </label>\n                        </div>\n\n                        {formik.values.part_of_complex && (\n                            <>\n                                <div>Existing complex</div>\n                                <div>\n                                    <label>\n                                        <Field type='radio' name='is_existing_complex' value='true' />\n                                        Yes\n                                    </label>\n                                    <label>\n                                        <Field type='radio' name='is_existing_complex' value='false' />\n                                        No\n                                    </label>\n                                </div>\n                            </>\n                        )}\n\n                        {formik.values.part_of_complex && formik.values.is_existing_complex && (\n                            <FormControl>\n                                <div id='existingComplexName__div'>\n                                    <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                                    <div id='existingComplexNameError__div'>\n                                        <Select\n                                            name='introduction.existing_complex_name'\n                                            value={formik.values.introduction.existing_complex_name}\n                                        >\n                                            <MenuItem value=''>Choose complex name</MenuItem>\n                                            {complexNames.map((item, index) => (\n                                                <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                                            ))}\n                                        </Select>\n                                    </div>\n                                    <div id='existingComplexNameError__container'>\n                                        {/* {errors.existing_complex_name && errors.existing_complex_name.type === 'required' && <span className='red_COLOR error_FORM'>A complex name is required</span>} */}\n                                    </div>\n                                </div>\n                            </FormControl>\n                        )}\n                        {/* <>\n                            <label htmlFor='introduction.existing_complex_name' style={{ display: 'block' }}>\n                                Complex name\n                            </label>\n                            <select\n                                name='introduction.existing_complex_name'\n                                value={values.introduction.existing_complex_name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                style={{ display: 'block' }}\n                            >\n                                <option value='' label='Select a complex' />\n                                {allData.map((item, index) => (\n                                    <option key={index} value={item.id} label={item.complex_name} />\n                                ))}\n                            </select>\n                        </> */}\n\n                       {/*  <label htmlFor='introduction.residence_type' style={{ display: 'block' }}>\n                            Complex name\n                        </label>\n                        <select\n                            name='introduction.residence_type'\n                            value={values.introduction.residence_type}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            style={{ display: 'block' }}\n                        >\n                            <option value='' label='Select a residence type' />\n                            {ResidenceTypes.map((item, index) => (\n                                <option key={index} value={item.value} label={item.label} />\n                            ))}\n                        </select>\n\n                        <label htmlFor='introduction.vhe_type' style={{ display: 'block' }}>\n                            Complex name\n                        </label>\n                        <select\n                            name='introduction.vhe_type'\n                            value={values.introduction.vhe_type}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            style={{ display: 'block' }}\n                        >\n                            <option value='' label='Select a living place type' />\n                            {LivingPlaceTypes.map((item, index) => (\n                                <option key={index} value={item.value} label={item.label} />\n                            ))}\n                        </select> */}\n\n                        <button type='submit'>Submit</button>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}