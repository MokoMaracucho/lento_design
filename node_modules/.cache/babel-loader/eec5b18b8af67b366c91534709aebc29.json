{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useFormik, getIn } from 'formik';\nimport * as yup from 'yup';\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material';\nimport complexNames from '../../Json/ComplexNames';\nimport residenceTypes from '../../Json/ResidenceTypes';\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  introduction: yup.object({\n    part_of_complex: yup.boolean(),\n    is_existing_complex: yup.boolean().when('part_of_complex', {\n      is: true,\n      then: yup.boolean().required('test')\n    }),\n    existing_complex_name: yup.number().when('is_existing_complex', {\n      is: true,\n      then: yup.number().required('test')\n    }),\n    residence_type: yup.number().required('A living place type is madatory'),\n    vhe_type: yup.number().required('A living place type is madatory')\n  })\n});\n\nconst SomeQuestions = props => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      introduction: {\n        part_of_complex: '',\n        is_existing_complex: '',\n        existing_complex_name: '',\n        residence_type: '',\n        vhe_type: ''\n      }\n    },\n    validationSchema: validationSchema,\n    onSubmit: data => {\n      props.next(data);\n    }\n  });\n  /* const[complexNames, setComplexNames] = useState([])\n    \n  const fetchComplexNames = () => {\n      axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n          const response = result.data.results\n          console.log(response)\n          setComplexNames(response)\n      }).catch(e => {\n          console.log('Error getting data: ' + e)\n      })\n  }\n   useEffect(() => {\n      fetchComplexNames()\n  }, []) */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"introduction.part_of_complex\",\n            value: formik.values.introduction.part_of_complex,\n            onChange: formik.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 42\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 42\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), formik.values.introduction.part_of_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black'\n            },\n            children: \"Is the residence part of a complex?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"introduction.is_existing_complex\",\n            value: formik.values.introduction.is_existing_complex,\n            onChange: formik.handleChange,\n            error: getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex')),\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"true\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 46\n              }, this),\n              label: \"True\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"false\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 46\n              }, this),\n              label: \"False\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this), getIn(formik.touched, 'introduction.is_existing_complex') && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getIn(formik.errors, 'introduction.is_existing_complex')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Choose a complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introduction.existing_complex_name\",\n            value: formik.values.introduction.existing_complex_name,\n            onChange: formik.handleChange,\n            error: getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name')),\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a complex name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this), complexNames.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.id,\n              children: item.complex_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), getIn(formik.touched, 'introduction.existing_complex_name') && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getIn(formik.errors, 'introduction.existing_complex_name')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introduction.residence_type\",\n            value: formik.values.introduction.residence_type,\n            onChange: formik.handleChange,\n            error: getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type')),\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a residence type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this), residenceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.value,\n              children: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), getIn(formik.touched, 'introduction.residence_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getIn(formik.errors, 'introduction.residence_type')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            component: \"legend\",\n            style: {\n              color: 'black',\n              marginBottom: '10px'\n            },\n            children: \"Living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            name: \"introduction.vhe_type\",\n            value: formik.values.introduction.vhe_type,\n            onChange: formik.handleChange,\n            error: getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type')),\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"\",\n              children: \"Choose a living place type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 29\n            }, this), livingPlaceTypes.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.value,\n              children: item.label\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), getIn(formik.touched, 'introduction.vhe_type') && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getIn(formik.errors, 'introduction.vhe_type')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          fullWidth: true,\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = SomeQuestions;\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/LivingPlaceRegistration/SomeQuestions.js"],"names":["React","useState","useEffect","axios","useFormik","getIn","yup","Button","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","MenuItem","Select","complexNames","residenceTypes","livingPlaceTypes","validationSchema","object","introduction","part_of_complex","boolean","is_existing_complex","when","is","then","required","existing_complex_name","number","residence_type","vhe_type","SomeQuestions","props","formik","initialValues","onSubmit","data","next","handleSubmit","color","values","handleChange","touched","Boolean","errors","marginBottom","map","item","index","id","complex_name","value","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { useFormik, getIn } from 'formik'\nimport * as yup from 'yup'\n\nimport { Button, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, MenuItem, Select } from '@mui/material'\n\nimport complexNames from '../../Json/ComplexNames'\nimport residenceTypes from '../../Json/ResidenceTypes'\nimport livingPlaceTypes from '../../Json/LivingPlaceTypes'\n\nconst validationSchema = yup.object({\n    introduction: yup.object({\n        part_of_complex: yup.boolean(),\n        is_existing_complex: yup.boolean().when('part_of_complex', {\n            is: true,\n            then: yup.boolean().required('test')\n        }),\n        existing_complex_name: yup.number().when('is_existing_complex', {\n            is: true,\n            then: yup.number().required('test')\n        }),\n        residence_type: yup.number().required('A living place type is madatory'),\n        vhe_type: yup.number().required('A living place type is madatory')\n    })\n})\n\nconst SomeQuestions = (props) => {\n\n    const formik = useFormik({\n        initialValues: {\n            introduction: {\n                part_of_complex: '',\n                is_existing_complex: '',\n                existing_complex_name: '',\n                residence_type: '',\n                vhe_type: ''\n            }\n        },\n        validationSchema: validationSchema,\n        onSubmit: (data) => {\n            props.next(data)\n        }\n    })\n\n    /* const[complexNames, setComplexNames] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(process.env.REACT_APP_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setComplexNames(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, []) */\n\n    return (\n        <>\n            <div>\n                <form onSubmit={formik.handleSubmit}>\n\n                    {/* PART OF A COMPLEX */}\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                        <RadioGroup\n                            name='introduction.part_of_complex'\n                            value={formik.values.introduction.part_of_complex}\n                            onChange={formik.handleChange}\n                        >\n                            <FormControlLabel\n                                value='true'\n                                control={<Radio />}\n                                label='True'\n                            />\n                            <FormControlLabel\n                                value='false'\n                                control={<Radio />}\n                                label='False'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n\n                    {/* EXISTING COMPLEX */}\n                    {formik.values.introduction.part_of_complex === 'true' && (\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend' style={{ color: 'black'}}>Is the residence part of a complex?</FormLabel>\n                            <RadioGroup\n                                name='introduction.is_existing_complex'\n                                value={formik.values.introduction.is_existing_complex}\n                                onChange={formik.handleChange}\n                                error={getIn(formik.touched, 'introduction.is_existing_complex') && Boolean(getIn(formik.errors, 'introduction.is_existing_complex'))}\n                            >\n                                <FormControlLabel\n                                    value='true'\n                                    control={<Radio />}\n                                    label='True'\n                                />\n                                <FormControlLabel\n                                    value='false'\n                                    control={<Radio />}\n                                    label='False'\n                                />\n                            </RadioGroup>\n                            {getIn(formik.touched, 'introduction.is_existing_complex') && (\n                                <div>\n                                    {getIn(formik.errors, 'introduction.is_existing_complex')}\n                                </div>\n                            )}\n                        </FormControl>\n                    )}\n                \n                    {/* EXISTING COMPLEX NAME */}\n                    {formik.values.introduction.part_of_complex === 'true' && formik.values.introduction.is_existing_complex === 'true' && (\n                        <FormControl>\n                            <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Choose a complex</FormLabel>\n                            <Select\n                                name='introduction.existing_complex_name'\n                                value={formik.values.introduction.existing_complex_name}\n                                onChange={formik.handleChange}\n                                error={getIn(formik.touched, 'introduction.existing_complex_name') && Boolean(getIn(formik.errors, 'introduction.existing_complex_name'))}\n                            >\n                                <MenuItem value=''>Choose a complex name</MenuItem>\n                                {complexNames.map((item, index) => (\n                                    <MenuItem key={index} value={item.id}>{item.complex_name}</MenuItem>\n                                ))}\n                            </Select>\n                            {getIn(formik.touched, 'introduction.existing_complex_name') && (\n                                <div>\n                                    {getIn(formik.errors, 'introduction.existing_complex_name')}\n                                </div>\n                            )}\n                        </FormControl>\n                    )}\n                \n                    {/* RESIDENCE TYPE */}\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Residence type</FormLabel>\n                        <Select\n                            name='introduction.residence_type'\n                            value={formik.values.introduction.residence_type}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.residence_type') && Boolean(getIn(formik.errors, 'introduction.residence_type'))}\n                        >\n                            <MenuItem value=''>Choose a residence type</MenuItem>\n                            {residenceTypes.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                        </Select>\n                        {getIn(formik.touched, 'introduction.residence_type') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.residence_type')}\n                            </div>\n                        )}\n                    </FormControl>\n                \n                    {/* LIVING PLACE TYPE */}\n                    <FormControl>\n                        <FormLabel component='legend' style={{ color: 'black', marginBottom: '10px'}}>Living place type</FormLabel>\n                        <Select\n                            name='introduction.vhe_type'\n                            value={formik.values.introduction.vhe_type}\n                            onChange={formik.handleChange}\n                            error={getIn(formik.touched, 'introduction.vhe_type') && Boolean(getIn(formik.errors, 'introduction.vhe_type'))}\n                        >\n                            <MenuItem value=''>Choose a living place type</MenuItem>\n                            {livingPlaceTypes.map((item, index) => (\n                                <MenuItem key={index} value={item.value}>{item.label}</MenuItem>\n                            ))}\n                        </Select>\n                        {getIn(formik.touched, 'introduction.vhe_type') && (\n                            <div>\n                                {getIn(formik.errors, 'introduction.vhe_type')}\n                            </div>\n                        )}\n                    </FormControl>\n                    \n                    <Button color='primary' variant='contained' fullWidth type='submit'>\n                        Submit\n                    </Button>\n                </form>\n            </div>\n        </>\n    )\n}\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}