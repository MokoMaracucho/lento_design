{"ast":null,"code":"var _jsxFileName = \"/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/SomeQuestions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Formik, Field, Form } from 'formik';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SomeQuestions = props => {\n  _s();\n\n  const [allData, setAllData] = useState([]);\n\n  const fetchComplexNames = () => {\n    axios.get(process.env.API_URL + 'vhe/complexname').then(result => {\n      const response = result.data.results;\n      console.log(response);\n      setAllData(response);\n    }).catch(e => {\n      console.log('Error getting data: ' + e);\n    });\n  };\n\n  useEffect(() => {\n    fetchComplexNames();\n  }, []);\n  if (!allData) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        part_of_complex: '',\n        is_existing_complex: '',\n        introduction: {\n          existing_complex_name: '',\n          residence_type: '',\n          vhe_type: ''\n        }\n      },\n      onSubmit: data => {\n        console.log(data);\n        const res = axios.post(process.env.REACT_APP_URL + 'vhe/registerintroduction/', data);\n        res.then(res => {\n          console.log('res', res);\n        }).catch(error => {\n          console.log(error);\n        });\n        props.next(data);\n      },\n      children: ({\n        values,\n        handleChange,\n        handleBlur\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Is the residence part of a complex?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"part_of_complex\",\n            value: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"part_of_complex\",\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"part_of_complex\",\n            value: \"false\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"part_of_complex\",\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), values.part_of_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Existing complex\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"true\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 37\n              }, this), \"Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                type: \"radio\",\n                name: \"is_existing_complex\",\n                value: \"false\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this), \"No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), values.part_of_complex && values.is_existing_complex && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"introduction.existing_complex_name\",\n            style: {\n              display: 'block'\n            },\n            children: \"Complex name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"introduction.existing_complex_name\",\n            value: values.introduction.existing_complex_name,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            style: {\n              display: 'block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              label: \"Select a complex\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 33\n            }, this), allData.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: item.id,\n              label: item.complex_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"introduction.residence_type\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"introduction.residence_type\",\n          value: values.introduction.residence_type,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            label: \"Select a residence type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), residenceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"introduction.vhe_type\",\n          style: {\n            display: 'block'\n          },\n          children: \"Complex name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"introduction.vhe_type\",\n          value: values.introduction.vhe_type,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          style: {\n            display: 'block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            label: \"Select a living place type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), livingPlaceTypes__array.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.value,\n            label: item.label\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SomeQuestions, \"wvSF2ckxQjUNASfZMrdtN9Q7fbY=\");\n\n_c = SomeQuestions;\nconst residenceTypes__array = [{\n  value: '1',\n  label: 'Apartment'\n}, {\n  value: '2',\n  label: 'House'\n}, {\n  value: '3',\n  label: 'Mobil home'\n}, {\n  value: '4',\n  label: 'Studio'\n}];\nconst livingPlaceTypes__array = [{\n  value: '1',\n  label: 'Bed'\n}, {\n  value: '2',\n  label: 'Room'\n}, {\n  value: '3',\n  label: 'Residence'\n}];\nexport default SomeQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"SomeQuestions\");","map":{"version":3,"sources":["/Users/moko/Desktop/TheBrink/lentoeu_frontend/src/Components/SomeQuestions.js"],"names":["React","useState","useEffect","axios","Formik","Field","Form","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","SomeQuestions","props","allData","setAllData","fetchComplexNames","get","process","env","API_URL","then","result","response","data","results","console","log","catch","e","part_of_complex","is_existing_complex","introduction","existing_complex_name","residence_type","vhe_type","res","post","REACT_APP_URL","error","next","values","handleChange","handleBlur","display","map","item","index","id","complex_name","residenceTypes__array","value","label","livingPlaceTypes__array"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport axios from 'axios'\n\nimport { Formik, Field, Form } from 'formik'\n\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core'\n\n\nconst SomeQuestions = (props) => {\n\n    const[allData, setAllData] = useState([])\n      \n    const fetchComplexNames = () => {\n        axios.get(process.env.API_URL + 'vhe/complexname').then(result => {\n            const response = result.data.results\n            console.log(response)\n            setAllData(response)\n        }).catch(e => {\n            console.log('Error getting data: ' + e)\n        })\n    }\n\n    useEffect(() => {\n        fetchComplexNames()\n    }, [])\n\n    if(!allData) return null\n\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    part_of_complex: '',\n                    is_existing_complex: '',\n                    introduction: {\n                        existing_complex_name: '',\n                        residence_type: '',\n                        vhe_type: ''\n                    }\n                }}\n                onSubmit={( data ) => {\n                    console.log(data)\n                    const res = axios.post(process.env.REACT_APP_URL + 'vhe/registerintroduction/', data)\n                    res.then(res => { console.log('res', res) }).catch( error => { console.log(error) })\n                    props.next(data)\n                }}\n            >\n            {({\n                values,\n                handleChange,\n                handleBlur\n            }) => (\n                <Form>\n                    {/* <div>Part of a complex</div>\n                    <div>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='true' />\n                            Yes\n                        </label>\n                        <label>\n                            <Field type='radio' name='part_of_complex' value='false' />\n                            No\n                        </label>\n                    </div> */}\n\n                    <p>Is the residence part of a complex?</p>\n                    <p>\n                        <input type='radio' name='part_of_complex' value='true' />\n                        <label htmlFor='part_of_complex'>Yes</label>\n                        <input type='radio' name='part_of_complex' value='false' />\n                        <label htmlFor='part_of_complex'>No</label>\n                    </p>\n\n                    {values.part_of_complex && (\n                        <>\n                            <div>Existing complex</div>\n                            <div>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='true' />\n                                    Yes\n                                </label>\n                                <label>\n                                    <Field type='radio' name='is_existing_complex' value='false' />\n                                    No\n                                </label>\n                            </div>\n                        </>\n                    )}\n\n                    {values.part_of_complex && values.is_existing_complex && (\n                        <>\n                            <label htmlFor='introduction.existing_complex_name' style={{ display: 'block' }}>\n                                Complex name\n                            </label>\n                            <select\n                                name='introduction.existing_complex_name'\n                                value={values.introduction.existing_complex_name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                style={{ display: 'block' }}\n                            >\n                                <option value='' label='Select a complex' />\n                                {allData.map((item, index) => (\n                                    <option key={index} value={item.id} label={item.complex_name} />\n                                ))}\n                            </select>\n                        </>\n                    )}\n\n                    <label htmlFor='introduction.residence_type' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='introduction.residence_type'\n                        value={values.introduction.residence_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        <option value='' label='Select a residence type' />\n                        {residenceTypes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <label htmlFor='introduction.vhe_type' style={{ display: 'block' }}>\n                        Complex name\n                    </label>\n                    <select\n                        name='introduction.vhe_type'\n                        value={values.introduction.vhe_type}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        style={{ display: 'block' }}\n                    >\n                        <option value='' label='Select a living place type' />\n                        {livingPlaceTypes__array.map((item, index) => (\n                            <option key={index} value={item.value} label={item.label} />\n                        ))}\n                    </select>\n\n                    <button type='submit'>Submit</button>\n                </Form>\n            )}\n            </Formik>\n        </>\n    )\n}\n\nconst residenceTypes__array = [\n    {\n        value: '1',\n        label: 'Apartment'\n    },\n    {\n        value: '2',\n        label: 'House'\n    },\n    {\n        value: '3',\n        label: 'Mobil home'\n    },\n    {\n        value: '4',\n        label: 'Studio'\n    }\n]\n\nconst livingPlaceTypes__array = [\n    {\n        value: '1',\n        label: 'Bed'\n    },\n    {\n        value: '2',\n        label: 'Room'\n    },\n    {\n        value: '3',\n        label: 'Residence'\n    }\n]\n\nexport default SomeQuestions\n"]},"metadata":{},"sourceType":"module"}